using System;
using System.Collections.Generic;
using System.Linq;

namespace MyLambdaLinq
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                {
                    ////一、Lambda
                    ////1、Lambda是什么
                    ////（1）形如：()=> { } 就是lambda表达式
                    ////（2）lambda表达式就是一个匿名方法，在底层会生成在一个"<>"类中，生成带有名称的方法
                    ////2、Lambda的演变过程
                    ////（1）.Netframework1.0/1.1，原始方法
                    ////（2）.NetFramework2.0，匿名方法
                    ////增加了一个delegate关键字,可以访问到除了参数以外的局部变量
                    ////（3）.NetFramework3.0，=>
                    ////去掉delegate关键字，在参数的后增加了一个=>  goes to
                    ////（4）.NetFramework3.0后期，简化参数类型
                    ////去掉了匿名方法中的参数类型，这个是编译器提供的语法糖，编译器可以根据委托类型定义的参数类型推导出参数类型
                    ////（5）如果方法体中只有一行代码，可以省略方法体大括号
                    ////（6）如果方法只有一个参数，省略参数小括号
                    ////（7）如果方法体中只有一行代码，且有返回值，可以省略return;
                    //new LambdaShow().Show();
                }

                {
                    ////二、匿名类
                    ////1、匿名类是什么
                    ////形如new {}，new一个对象，不需要类名称了，NETFramework3.0出现的
                    ////2、匿名类+object
                    ////object去接匿名类，无法访问属性值，因为C#是强类型语言，object是在编译时确定类型，因为Object没有这个属性
                    ////3、匿名类+dynamic
                    ////dynamic(动态类型)可以避开编译器检查，.NETFramework 4.0出现的
                    ////dynamic去接匿名类，可以访问属性值，因为dynamic是运行时才检查的，但是访问不存在的属性也不报错，运行时才报异常
                    ////4、匿名类+var
                    ////var去接匿名类，可以读取属性，不能给属性重新赋值，只能在初始化的时候给定一个值
                    ////var是编译器的语法糖，由编译器自动推算类型
                    ////var声明的变量必须初始化，必须能推算出类型，var aa = null;或者var aa;都是不正确的
                    ////var缺陷：阅读麻烦，建议能明确类型的还是明确类型，优点：简化代码
                    //AnonymousClassShow.Show();
                }

                {
                    ////三、扩展方法
                    ////1、为什么使用扩展方法
                    ////需求：给一个类增加一个功能
                    ////（1）方案1：类上直接添加一个方法
                    ////需要修改原类，类一旦修改，类就需要重新发布编译，违背了开闭原则，如果要新增一个功能，尽量做到不去修改之前的代码
                    ////自己的类要修改还是可以修改的，但是系统框架的类无法去修改的
                    ////（2）方案2：添加一个外部类方法，把当前类作为参数传入
                    ////不需要修改原类，就可以获取到传递过来的这个实体中的各种数据
                    ////调用方法需要调用其他类的方法，还要把当前类实例作为参数传进去，还是麻烦
                    ////（3）方案3：扩展方法
                    ////把传入的当前实例参数放在第一个参数，参数前面加this关键字，就可以直接用当前实例调用扩展方法，就像调用实例自己的方法一样
                    ////扩展方法三要素：静态类，静态方法，第一个参数this关键字
                    ////2、可以为哪些类扩展方法
                    ////（1）普通类扩展方法
                    ////（2）泛型类扩展方法
                    ////可以，但是扩展泛型类，会有侵入性，相当于让任何一个类型，都拥有了这个方法，覆盖的访问太广
                    ////（3）Object类扩展方法
                    ////可以，但是扩展泛型类，会有侵入性，因为任何一个类型都是object的子类，扩展object，就相当于给所有的类型扩展了一个方法，可能会让一些类型，存在了一些不应该存在的行为
                    ////（4）扩展方法调用优先级
                    ////如果增加了扩展方法，同时也在类的内部增加了一个同样的方法，在调用的时候，会优先调用类内部的方法
                    ////3、扩展方法应用场景                    
                    ////（1）扩展第三方的类库
                    ////第三方类库通过dll方式引入进来的，我们是不能直接取修改代码的，可以通过扩展方法，给第三方的类库中的某个类型增加功能呢，扩展功能
                    ////（2）原有功能的扩展
                    ////在系统做维护的的时候，需要做到不修改之前的代码，想要增加功能的时候
                    //MethodExtension.Show();
                }

                {
                    ////四、Linq
                    ////1、Linq是什么
                    ////（1）Linq（Language Integrated Query）即语言集成查询。是Visual Studio 2008 和 .NET Framework 3.5 版中引入的一项创新功能。
                    ////（2）Linq是一组语言特性和API，使得你可以使用统一的方式编写各种查询。用于保存和检索来自不同数据源的数据，从而消除了编程语言和数据库之间的不匹配，以及为不同类型的数据源提供单个查询接口。
                    ////（3）Linq总是使用对象，因此你可以使用相同的查询语法来查询和转换XML、对象集合、SQL数据库、ADO.NET数据集以及任何其他可用的LINQ提供程序格式的数据。
                    ////（4）Linq主要包含以下部分
                    ////Linq to Objects 主要负责对象的查询。
                    ////Linq to XML 主要负责XML的查询。
                    ////Linq to ADO.NET 主要负责数据库的查询。
                    ////Linq to SQL
                    ////Linq to DataSet
                    ////Linq to Entities
                    ////Linq to Everything
                    ////2、Linq的原理
                    ////需求：存在一个集合，要过滤其中的数据
                    ////（1）方案1：循环 + 判断
                    ////（2）方案2：扩展方法 + Lambda
                    ////可以把不变的业务逻辑保留，把可变的，不固定的业务逻辑转移出去，就可以用委托包装一个方法传递过来，简化重复代码
                    ////（3）方案3：Linq中的Where
                    ////实现原理和我们自己写的扩展方法类似
                    ////Linq的底层都是通过迭代器来实现就是支持循环
                    ////Linq的底层使用IEnumerable来承接数据
                    //new LinqShow().Show();
                    ////3、Linq的优势
                    ////（1）减少编码
                    ////相比较传统的方式，LINQ减少了要编写的代码量。
                    ////（2）可读性强
                    ////LINQ增加了代码的可读性，开发人员可以很轻松地理解和维护。
                    ////（3）标准化的查询方式
                    ////可以使用相同的LINQ语法查询多个数据源。
                    ////（4）智能感知提示
                    ////LINQ为通用集合提供智能感知提示。 
                }

                {
                    //五、Linq语句使用
                    new LinqUseShow().Show();
                }
                Console.ReadKey();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
